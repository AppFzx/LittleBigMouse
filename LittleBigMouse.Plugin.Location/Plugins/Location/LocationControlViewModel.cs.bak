/*
  LittleBigMouse.Plugin.Location
  Copyright (c) 2017 Mathieu GRENET.  All right reserved.

  This file is part of LittleBigMouse.Plugin.Location.

    LittleBigMouse.Plugin.Location is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LittleBigMouse.Plugin.Location is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MouseControl.  If not, see <http://www.gnu.org/licenses/>.

	  mailto:mathieu@mgth.fr
	  http://www.mgth.fr
*/

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;
using System.Windows.Input;
using HLab.Base.Extensions;
using HLab.DependencyInjection.Annotations;
using HLab.Mvvm;
using HLab.Mvvm.Commands;
using HLab.Notify.Annotations;
using HLab.Notify.PropertyChanged;
using HLab.Windows.Monitors;
using LittleBigMouse.ScreenConfigs;
using Newtonsoft.Json;

namespace LittleBigMouse.Plugin.Location.Plugins.Location
{
    class LocationControlViewModel : ViewModel<LocationControlViewModel,ScreenConfig>
    {
        private readonly IMonitorsService _monitorsService;

        public LocationControlViewModel()
        {
        }



        [TriggerOn(nameof(Model))]
        public ScreenConfig Config => Model;


        private void Client_StateChanged()
        {
            Running = LittleBigMouseClient.Client.Running();
        }

        private class JsonExport
        {
            [JsonProperty]
            public ScreenConfig Config { get; set; }
            [JsonProperty]
            public ObservableCollectionSafe<Monitor> Monitors { get; set; }
        }

        public ICommand CopyCommand => _copyCommand.Get();
        private readonly IProperty<ICommand> _copyCommand 
            = H.Property<ICommand>(nameof(CopyCommand), c =>c
        .Command(
            e =>
            {
                var export = new JsonExport
                {
                    Config = e.Model,
                    Monitors = e._monitorsService.Monitors
                };
                var json = JsonConvert.SerializeObject(export, Newtonsoft.Json.Formatting.Indented);
                Clipboard.SetText(json);
            },
            e => true)
       );

        public String StatStopLabel => LittleBigMouseClient.Client.Running()?"Stop":"Start";

        
        public ICommand SaveCommand => _saveCommand.Get();
        private readonly IProperty<ICommand> _saveCommand = H.Property< ICommand>(
            nameof(SaveCommand), c => c
                .On(nameof(Config), "Saved")               
                .Command(
                e => { e.Config.Save(); },
                e => e.Config.Saved == false));



        public ICommand UndoCommand => _undoCommand.Get();
        private readonly IProperty<ICommand> _undoCommand = H.Property< ICommand>(
            nameof(UndoCommand), c => c
                .On(nameof(Config), "Saved")
                .Command(
                    e => { e.Config.Load(); },
                    e => e.Config.Saved == false));

        public ICommand StartCommand => _startCommand.Get();
        private readonly IProperty<ICommand> _startCommand = H.Property< ICommand>(
            nameof(StartCommand), c => c
                .On(e => e.Config.Saved)
                .On(e => e.Running)
                .NotNull(e => e.Config)
                .Command(
                    e => {
                        e.Config.Enabled = true;

                        if (!e.Config.Saved)
                            e.Config.Save();

                        //LittleBigMouseClient.Client.LoadConfig();

                        //if (!Running)
                        LittleBigMouseClient.Client.Start();

                        e.Client_StateChanged();
                    },
                    e => !(e.Running && e.Config.Saved)));








        public ICommand StopCommand => _stopCommand.Get();
        private readonly IProperty<ICommand> _stopCommand = H.Property< ICommand>(
            nameof(StopCommand), c => c
                .On(nameof(Running))
                .Command(
                    e => {
                        LittleBigMouseClient.Client.Stop();
                        e.Client_StateChanged();
                    },
                    e => e.Running ));

        private readonly IProperty<bool> _running = H.Property< bool>(nameof(Running));
        public bool Running {
            get => _running.Get();
            private set => _running.Set(value); }

        private readonly IProperty<bool> _liveUpdate = H.Property< bool>(nameof(LiveUpdate));
        public bool LiveUpdate
        {
            get => _liveUpdate.Get();
            set => _liveUpdate.Set(value);
        }

        public bool LoadAtStartup
        {
            get => Config.LoadAtStartup; set
            {
                Config.LoadAtStartup = value;
                LittleBigMouseClient.Client.LoadAtStartup(value);
            }
        }


        [TriggerOn(nameof(LiveUpdate))]
        [TriggerOn(nameof(Model),"Saved")]
        private void DoLiveUpdate()
        {
            if (LiveUpdate && !Config.Saved)
            {
                StartCommand.Execute(null);
            }
        }

        [Import(InjectLocation.AfterConstructor)]
        public LocationControlViewModel(IMonitorsService monitorsService)
        {
            _monitorsService = monitorsService;
            LittleBigMouseClient.Client.StateChanged += Client_StateChanged;
            Initialize();
            Client_StateChanged();
        }
    }
}
